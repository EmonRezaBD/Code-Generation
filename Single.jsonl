{"Commit title": "Allow/Fix special characters in json replies in WebUI", "Before version": "@@ -76,9 +76,7 @@ QString json::toJson(const QVariant& v) {\nresult +=\"\\\\t\";\nbreak;\ncase'\\\"':\ncase'\\'':\ncase'\\\\':\ncase'&':\nresult +='\\\\';\ncase'\\0':\ndefault:\n", "After version": "", "Difference": ""}
{"Commit title": "Fix crash when delete RSS feed", "Before version": "@@ -137,6 +137,7 @@ void FeedListWidget::handleItemPathChanged(RSS::Item *rssItem)\n\nvoidFeedListWidget::handleItemAboutToBeRemoved(RSS::Item *rssItem)\n{\nrssItem->disconnect(this);\ndeletem_rssToTreeItemMapping.take(rssItem);\n\n//RSS Item is still valid in this slot so if it is the last\n", "After version": "", "Difference": ""}
{"Commit title": "Change MixedModeAlgorithm default to TCP.Closes#7779.", "Before version": "@@ -304,7 +304,7 @@ Session::Session(QObject *parent)\n, m_btProtocol(BITTORRENT_SESSION_KEY(\"BTProtocol\"), BTProtocol::Both\n, clampValue(BTProtocol::Both, BTProtocol::UTP))\n, m_isUTPRateLimited(BITTORRENT_SESSION_KEY(\"uTPRateLimited\"),true)\n, m_utpMixedMode(BITTORRENT_SESSION_KEY(\"uTPMixedMode\"), MixedModeAlgorithm::Proportional\n, m_utpMixedMode(BITTORRENT_SESSION_KEY(\"uTPMixedMode\"), MixedModeAlgorithm::TCP\n, clampValue(MixedModeAlgorithm::TCP, MixedModeAlgorithm::Proportional))\n, m_multiConnectionsPerIpEnabled(BITTORRENT_SESSION_KEY(\"MultiConnectionsPerIp\"),false)\n, m_isAddTrackersEnabled(BITTORRENT_SESSION_KEY(\"AddTrackersEnabled\"),false)\n", "After version": "", "Difference": ""}
{"Commit title": "Use a more detailed alert mask where possible", "Before version": "@@ -392,7 +392,11 @@ Session::Session(QObject *parent)\n| libt::alert::tracker_notification\n| libt::alert::status_notification\n| libt::alert::ip_block_notification\n#ifLIBTORRENT_VERSION_NUM < 10110\n| libt::alert::progress_notification\n#else\n| libt::alert::file_progress_notification\n#endif\n| libt::alert::stats_notification;\n\n#ifLIBTORRENT_VERSION_NUM < 10100\n", "After version": "", "Difference": ""}
{"Commit title": "Change number of time axis divisions from 5 to 6 for convenience", "Before version": "@@ -327,11 +327,11 @@ void SpeedPlotView::paintEvent(QPaintEvent *)\npainter.drawLine(fullRect.left(), rect.top() +0.75* rect.height(), rect.right(), rect.top() +0.75* rect.height());\npainter.drawLine(fullRect.left(), rect.bottom(), rect.right(), rect.bottom());\n\npainter.drawLine(rect.left(), fullRect.top(), rect.left(), fullRect.bottom());\npainter.drawLine(rect.left() +0.2* rect.width(), fullRect.top(), rect.left() +0.2* rect.width(), fullRect.bottom());\npainter.drawLine(rect.left() +0.4* rect.width(), fullRect.top(),rect.left() +0.4* rect.width(), fullRect.bottom());\npainter.drawLine(rect.left() +0.6* rect.width(), fullRect.top(),rect.left() +0.6* rect.width(), fullRect.bottom());\npainter.drawLine(rect.left() +0.8* rect.width(), fullRect.top(), rect.left() +0.8* rect.width(), fullRect.bottom());\nconstintTIME_AXIS_DIVISIONS =6;\nfor(inti =0; i < TIME_AXIS_DIVISIONS; ++i) {\nconstintx =rect.left() +(i* rect.width()) / TIME_AXIS_DIVISIONS;\npainter.drawLine(x, fullRect.top(),x, fullRect.bottom());\n}\n\n//Set antialiasing for graphs\npainter.setRenderHints(QPainter::Antialiasing | QPainter::HighQualityAntialiasing);\n", "After version": "", "Difference": ""}
{"Commit title": "Run all passing json against parse_many. Empty documents pass, too.", "Before version": "@@ -83,17 +83,21 @@ bool validate(const char *dirname) {\nif(contains(\"EXCLUDE\", name)) {\n//skipping\nhow_many--;\n}elseif(starts_with(\"pass\", name)and(has_extension(extension1, name)orhas_extension(extension2, name))anderror) {\nis_file_as_expected[i] =false;\nprintf(\"warning: file %s should pass but it fails. Error is: %s\\n\",\nname,error_message(error));\nprintf(\"size of file in bytes: %zu\\n\", json.size());\neverything_fine =false;\n}elseif(starts_with(\"fail\", name)and(notstarts_with(\"fail10.json\", name))and!error) {\nis_file_as_expected[i] =false;\nprintf(\"warning: file %s should fail but it passes.\\n\", name);\nprintf(\"size of file in bytes: %zu\\n\", json.size());\neverything_fine =false;\n}elseif(starts_with(\"pass\", name)orstarts_with(\"fail10.json\", name)orstarts_with(\"fail70.json\", name)) {\nif(error) {\nis_file_as_expected[i] =false;\nprintf(\"warning: file %s should pass but it fails. Error is: %s\\n\",\nname,error_message(error));\nprintf(\"size of file in bytes: %zu\\n\", json.size());\neverything_fine =false;\n}\n}elseif(starts_with(\"fail\", name) ) {\nif(!error) {\nis_file_as_expected[i] =false;\nprintf(\"warning: file %s should fail but it passes.\\n\", name);\nprintf(\"size of file in bytes: %zu\\n\", json.size());\neverything_fine =false;\n}\n}\nfree(fullpath);\n}\n", "After version": "", "Difference": ""}
{"Commit title": "Fix arm64 build", "Before version": "@@ -140,7 +140,7 @@ WARN_UNUSED error_code dom_parser_implementation::stage1(const uint8_t *_buf, si\n}\n\nWARN_UNUSEDboolimplementation::validate_utf8(constchar*buf,size_tlen)constnoexcept{\nreturnsimdjson::arm64::stage1::generic_validate_utf8(buf,len);\nreturnarm64::stage1::generic_validate_utf8(buf,len);\n}\n\nWARN_UNUSED error_codedom_parser_implementation::stage2(dom::document &_doc)noexcept{\n", "After version": "", "Difference": ""}
{"Commit title": "This makes the float errors explicit.", "Before version": "@@ -2,6 +2,7 @@\n\n#include<vector>\n#include<sstream>\n#include<limits>\n\ntemplate<typenameT>\nstaticbooldiff_results(benchmark::State &state,constT &result,constT &reference);\n@@ -19,6 +20,24 @@ struct result_differ {\n}\n};\n\ntemplate<>\nboolresult_differ<double>::diff(benchmark::State &state,constdouble&result,constdouble&reference) {\nif(result != reference) {\nstd::stringstream str;\n//We print it out using full precision.\nautoprior_precision = str.precision(std::numeric_limits<double>::max_digits10);\nstr <<\"result incorrect:\"<< result <<\"... reference:\"<< reference;\nstr.precision(prior_precision);//reset to prior state\nstr << std::hexfloat;//If there are floats, we want to see them in hexadecimal form!\nstr <<\"result incorrect (hexadecimal notation):\"<< result <<\"... reference:\"<< reference;\nstr << std::defaultfloat;//reset to prior state\nstate.SkipWithError(str.str().data());\nreturnfalse;\n}\nreturntrue;\n}\n\n\ntemplate<typenameT>\nstructresult_differ<std::vector<T>> {\nstaticbooldiff(benchmark::State &state,conststd::vector<T> &result,conststd::vector<T> &reference) {\n", "After version": "", "Difference": ""}
{"Commit title": "Fix clang-format violation", "Before version": "@@ -347,5 +347,4 @@ void ACameraDirector::notifyViewModeChanged()\nUWorld* world =GetWorld();\nUGameViewportClient* gameViewport = world->GetGameViewport();\ngameViewport->bDisableWorldRendering= nodisplay;\n\n}", "After version": "", "Difference": ""}
