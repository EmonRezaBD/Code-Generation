{"Commit title": "LibUnicode: Optimize the canonical composition algorithm implementation", "Commit body": "No code changes found."}
{"Commit title": "Bump org.mockito:mockito-core from 4.11.0 to 5.12.0", "Commit body": "No code changes found."}
{"Commit title": "#22244fix typo", "Commit body": "No code changes found."}
{"Commit title": "AK: Use correct wide integer type for qhat check in UFixedBigIntDivision", "Commit body": "No code changes found."}
{"Commit title": "#20060Revert JSQLParser to 4.5", "Commit body": "No code changes found."}
{"Commit title": "LibPDF: Usedraw_rect()to show debug clipping rects", "Commit body": "No code changes found."}
{"Commit title": "#18798escape wild cards during primary and imported keys loading", "Commit body": "No code changes found."}
{"Commit title": "LibUnicode: Optimize the canonical composition algorithm implementation", "Commit body": "@@ -208,42 +208,52 @@ static void canonical_ordering_algorithm(Span<u32> code_points)\n//See Section 3.11, D115 of Version 15.0.0 of the Unicode Standard.\nstaticboolis_blocked(Span<u32> code_points,size_ta,size_tc)\n{\nif(!is_starter(code_points[a]) ||a == c -1)\nif(a == c -1)\nreturnfalse;\nautoconstc_combining_class =Unicode::canonical_combining_class(code_points[c]);\nautoconstb_combining_class =Unicode::canonical_combining_class(code_points[c -1]);\nreturnb_combining_class==0|| b_combining_class>= c_combining_class;\nreturnb_combining_class >= c_combining_class;\n}\n\n//The Canonical Composition Algorithm, as specified in Version 15.0.0 of the Unicode Standard.\n//See Section 3.11, D117; and UAX #15 https://unicode.org/reports/tr15\n//https://www.unicode.org/versions/Unicode15.0.0/ch03.pdf#G50628\nstaticvoidcanonical_composition_algorithm(Vector<u32>& code_points)\n{\nif(code_points.size() <=1)\nreturn;\nssize_tlast_starter =is_starter(code_points[0]) ?0: -1;\nfor(size_ti =1; i < code_points.size(); ++i) {\nautoconstcurrent_character = code_points[i];\n//R1. Seek back (left) to find the last Starter L preceding C in the character sequence\nfor(ssize_tj = i -1; j >=0; --j) {\nif(!is_starter(code_points[j]))\ncontinue;\n//R2. If there is such an L, and C is not blocked from L,\n//and there exists a Primary Composite P which is canonically equivalent to <L, C>,\n//then replace L by P in the sequence and delete C from the sequence.\nif(is_blocked(code_points.span(), j, i))\ncontinue;\nif(last_starter == -1) {\nif(is_starter(current_character))\nlast_starter = i;\ncontinue;\n}\n//R2. If there is such an L, and C is not blocked from L,\n//and there exists a Primary Composite P which is canonically equivalent to <L, C>,\n//then replace L by P in the sequence and delete C from the sequence.\nif(is_blocked(code_points.span(), last_starter, i)) {\nif(is_starter(current_character))\nlast_starter = i;\ncontinue;\n}\n\nautocomposite =combine_hangul_code_points(code_points[j], current_character);\nautocomposite =combine_hangul_code_points(code_points[last_starter], current_character);\n\nif(composite ==0)\ncomposite =combine_code_points(code_points[j], current_character);\nif(composite ==0)\ncomposite =combine_code_points(code_points[last_starter], current_character);\n\nif(composite !=0) {\ncode_points[j] = composite;\ncode_points.remove(i);\n--i;\nbreak;\n}\nif(composite ==0) {\nif(is_starter(current_character))\nlast_starter = i;\ncontinue;\n}\n\ncode_points[last_starter] = composite;\ncode_points.remove(i);\n--i;\n}\n}\n\n"}
{"Commit title": "Bump org.mockito:mockito-core from 4.11.0 to 5.12.0", "Commit body": "@@ -16,7 +16,7 @@ ext {\nreactiveStreamsVersion=\"1.0.4\"\njunitVersion=\"4.13.2\"\ntestNgVersion=\"7.5\"\nmockitoVersion=\"4.11.0\"\nmockitoVersion=\"5.12.0\"\njmhLibVersion=\"1.21\"\nguavaVersion=\"33.2.0-jre\"\n}\n"}
{"Commit title": "#22244fix typo", "Commit body": "@@ -70,7 +70,7 @@ tree.sequences.node.tip = MariaDB Sequences\n\nmanager.catalog.name=Catalog manager\n\nparameters.all.caches= Cachemeta data\nparameters.all.caches= Cachemetadata\nparameters.all.caches.tip= Read tables constraints and columns at the stage of reading tables.\\nThis setting may reduce metadata loading performance for small databases and increase for large databases.\n\nmeta.org.jkiss.dbeaver.ext.mysql.model.MySQLCatalog.name.name=Schema Name\n"}
{"Commit title": "AK: Use correct wide integer type for qhat check in UFixedBigIntDivision", "Commit body": "@@ -95,7 +95,7 @@ constexpr void div_mod_internal(\nqhat =div_mod_words(dividend[i -1], dividend[i], divisor_approx, rhat);\n\nautois_qhat_too_large = [&] {\nreturnUFixedBigInt<native_word_size> { qhat }.wide_multiply(divisor[divisor_len -2]) >u128{ dividend[i -2], rhat };\nreturnUFixedBigInt<native_word_size> { qhat }.wide_multiply(divisor[divisor_len -2]) >UFixedBigInt<native_word_size *2>{ dividend[i -2], rhat };\n};\nif(is_qhat_too_large()) {\n--qhat;\n"}
{"Commit title": "#20060Revert JSQLParser to 4.5", "Commit body": "@@ -9,7 +9,7 @@\n<name>DBeaver - 3rd party dependencies</name>\n\n<properties>\n<tycho-version>3.0.0</tycho-version>\n<tycho-version>3.0.1</tycho-version>\n<reficio-p2-version>1.4.1</reficio-p2-version>\n<repo-name>DBeaver CE Update</repo-name>\n</properties>\n@@ -34,7 +34,7 @@\n<id>default-cli</id>\n<configuration>\n<artifacts>\n<artifact><id>com.github.jsqlparser:jsqlparser:4.6</id></artifact>\n<artifact><id>com.github.jsqlparser:jsqlparser:4.5</id></artifact>\n<!--<artifact><id>com.manticore-projects.jsqlformatter:jsqlformatter:0.1.7</id></artifact>-->\n\n<artifact><id>org.apache.commons:commons-jexl3:3.1</id></artifact>\n"}
{"Commit title": "LibPDF: Usedraw_rect()to show debug clipping rects", "Commit body": "@@ -305,12 +305,12 @@ RENDERER_HANDLER(path_append_rect)\n\nvoidRenderer::activate_clip()\n{\nautobounding_box =state().clipping_paths.current.bounding_box();\nautobounding_box =state().clipping_paths.current.bounding_box().to_type<int>();\nm_painter.clear_clip_rect();\nif(m_rendering_preferences.show_clipping_paths) {\nm_painter.stroke_path(rect_path(bounding_box), Color::Black,1);\nm_painter.draw_rect(bounding_box, Color::Black);\n}\nm_painter.add_clip_rect(bounding_box.to_type<int>());\nm_painter.add_clip_rect(bounding_box);\n}\n\nvoidRenderer::deactivate_clip()\n"}
{"Commit title": "#18798escape wild cards during primary and imported keys loading", "Commit body": "@@ -732,8 +732,9 @@ public JDBCStatement prepareUniqueConstraintsLoadStatement(@NotNull JDBCSession\nthrowsSQLException,DBException{\nreturnsession.getMetaData().getPrimaryKeys(\nowner.getCatalog() ==null?null:owner.getCatalog().getName(),\nowner.getSchema() ==null||DBUtils.isVirtualObject(owner.getSchema()) ?null:owner.getSchema().getName(),\nforParent==null?owner.getDataSource().getAllObjectsPattern() :forParent.getName())\nowner.getSchema() ==null||DBUtils.isVirtualObject(owner.getSchema()) ?\nnull:JDBCUtils.escapeWildCards(session,owner.getSchema().getName()),\nforParent==null?owner.getDataSource().getAllObjectsPattern() :JDBCUtils.escapeWildCards(session,forParent.getName()))\n.getSourceStatement();\n}\n\n@@ -749,10 +750,11 @@ public GenericTableForeignKey createTableForeignKeyImpl(GenericTableBase table,\npublicJDBCStatementprepareForeignKeysLoadStatement(@NotNullJDBCSessionsession,@NotNullGenericStructContainerowner,@NullableGenericTableBaseforParent)throwsSQLException{\nreturnsession.getMetaData().getImportedKeys(\nowner.getCatalog() ==null?null:owner.getCatalog().getName(),\nowner.getSchema() ==null||DBUtils.isVirtualObject(owner.getSchema()) ?null:owner.getSchema().getName(),\nowner.getSchema() ==null||DBUtils.isVirtualObject(owner.getSchema()) ?\nnull:JDBCUtils.escapeWildCards(session,owner.getSchema().getName()),\nforParent==null?\nowner.getDataSource().getAllObjectsPattern() :\nforParent.getName())\nJDBCUtils.escapeWildCards(session,forParent.getName()))\n.getSourceStatement();\n}\n\n"}
{"Commit title": "LibIPC: Use a simpler encoding for arithmetic values", "Commit body": "@@ -40,11 +40,6 @@ class Encoder {\nreturnm_buffer.data.try_ensure_capacity(m_buffer.data.size() + capacity);\n}\n\nvoidappend(u8 value)\n{\nm_buffer.data.unchecked_append(value);\n}\n\nErrorOr<void>append(u8const* values,size_tcount)\n{\nTRY(extend_capacity(count));\n@@ -67,31 +62,7 @@ class Encoder {\ntemplate<Arithmetic T>\nErrorOr<void>encode(Encoder& encoder, Tconst& value)\n{\nTRY(encoder.extend_capacity(sizeof(T)));\n\nifconstexpr(sizeof(T) ==1) {\nencoder.append(static_cast<u8>(value));\n}elseifconstexpr(sizeof(T) ==2) {\nencoder.append(static_cast<u8>(value));\nencoder.append(static_cast<u8>(value >>8));\n}elseifconstexpr(sizeof(T) ==4) {\nencoder.append(static_cast<u8>(value));\nencoder.append(static_cast<u8>(value >>8));\nencoder.append(static_cast<u8>(value >>16));\nencoder.append(static_cast<u8>(value >>24));\n}elseifconstexpr(sizeof(T) ==8) {\nencoder.append(static_cast<u8>(value));\nencoder.append(static_cast<u8>(value >>8));\nencoder.append(static_cast<u8>(value >>16));\nencoder.append(static_cast<u8>(value >>24));\nencoder.append(static_cast<u8>(value >>32));\nencoder.append(static_cast<u8>(value >>40));\nencoder.append(static_cast<u8>(value >>48));\nencoder.append(static_cast<u8>(value >>56));\n}else{\nstatic_assert(DependentFalse<T>);\n}\n\nTRY(encoder.append(reinterpret_cast<u8const*>(&value),sizeof(value)));\nreturn{};\n}\n\n"}
{"Commit title": "HackStudio: Remove adjustment of text range for documentation tooltip", "Commit body": "@@ -263,11 +263,8 @@ void Editor::mousemove_event(GUI::MouseEvent& event)\n}\n\nif(span.range.contains(text_position)) {\nautoadjusted_range = span.range;\nautoend_line_length =document().line(span.range.end().line()).length();\nadjusted_range.end().set_column(min(end_line_length, adjusted_range.end().column() +1));\nautohovered_span_text =document().text_in_range(adjusted_range);\ndbgln_if(EDITOR_DEBUG,\"Hovering: {}\\\"{}\\\"\", adjusted_range, hovered_span_text);\nautohovered_span_text =document().text_in_range(span.range);\ndbgln_if(EDITOR_DEBUG,\"Hovering: {}\\\"{}\\\"\", span.range, hovered_span_text);\n\nif(is_clickable) {\nis_over_clickable =true;\n"}
{"Commit title": "#17675read enum values specifically for new added types", "Commit body": "@@ -314,6 +314,27 @@ private void readEnumValues(@NotNull DBRProgressMonitor monitor) throws DBExcept\n.toArray();\n}\n\nprivatevoidreadNewEnumValues(DBRProgressMonitormonitor)throwsDBException{\ntry(JDBCSessionsession=DBUtils.openMetaSession(monitor,this,\"Refresh enum values\")) {\ntry(JDBCPreparedStatementdbStat=session.prepareStatement(\n\"SELECT e.enumlabel\\n\"+\n\"FROM pg_catalog.pg_enum e\\n\"+\n\"WHERE e.enumtypid=?\\n\"+\n\"ORDER BY e.enumsortorder\")) {\ndbStat.setLong(1,getObjectId());\ntry(JDBCResultSetrs=dbStat.executeQuery()) {\nList<String>values=newArrayList<>();\nwhile(rs.nextRow()) {\nvalues.add(JDBCUtils.safeGetString(rs,1));\n}\nenumValues=values.toArray();\n}\n}catch(SQLExceptione) {\nthrownewDBException(\"Error reading enum values\",e,getDataSource());\n}\n}\n}\n\npublicstaticString[]getOidTypes() {\nreturnOID_TYPES;\n}\n@@ -627,9 +648,13 @@ public DBSObject refreshObject(@NotNull DBRProgressMonitor monitor) throws DBExc\n\n@Property(viewable=true,order=16,visibleIf=EnumTypeValidator.class)\npublicObject[]getEnumValues(DBRProgressMonitormonitor) {\nif(typeCategory==PostgreTypeCategory.E&&enumValues==null) {\nif(typeCategory==PostgreTypeCategory.E&&ArrayUtils.isEmpty(enumValues)) {\ntry{\nreadEnumValues(monitor);\nif(ArrayUtils.isEmpty(enumValues)) {\n// Probably new objects not cached yet. Let's read them.\nreadNewEnumValues(monitor);\n}\n}catch(DBExceptione) {\nlog.error(\"Can't read enum values of type \"+getFullTypeName());\nenumValues=newObject[]{0};\n"}
{"Commit title": "LibUnicode: Make unicode data generation logic more relocatable", "Commit body": "@@ -30,31 +30,25 @@ if (ENABLE_UNICODE_DATABASE_DOWNLOAD)\nfile(DOWNLOAD${WORD_BREAK_URL}${WORD_BREAK_PATH}INACTIVITY_TIMEOUT 10)\nendif()\n\nset(UNICODE_GENERATOR CodeGenerators/GenerateUnicodeData)\nset(UNICODE_DATA_HEADER UnicodeData.h)\nset(UNICODE_DATA_IMPLEMENTATION UnicodeData.cpp)\nset(UNICODE_DATA_HEADER LibUnicode/UnicodeData.h)\nset(UNICODE_DATA_IMPLEMENTATION LibUnicode/UnicodeData.cpp)\n\nif(CMAKE_SOURCE_DIRMATCHES\".*/Lagom\")#Lagom-only build.\nset(UNICODE_GENERATOR LibUnicode/CodeGenerators/GenerateUnicodeData)\nset(UNICODE_DATA_HEADER LibUnicode/UnicodeData.h)\nset(UNICODE_DATA_IMPLEMENTATION LibUnicode/UnicodeData.cpp)\nelseif(CMAKE_CURRENT_BINARY_DIRMATCHES\".*/Lagom\")#Lagom build within the main SerenityOS build.\nset(UNICODE_GENERATOR ../../Userland/Libraries/LibUnicode/CodeGenerators/GenerateUnicodeData)\nset(UNICODE_DATA_HEADER LibUnicode/UnicodeData.h)\nset(UNICODE_DATA_IMPLEMENTATION LibUnicode/UnicodeData.cpp)\nif(CMAKE_CURRENT_BINARY_DIRMATCHES\".*/LibUnicode\")#Serenity build.\nset(UNICODE_DATA_HEADER UnicodeData.h)\nset(UNICODE_DATA_IMPLEMENTATION UnicodeData.cpp)\nendif()\n\nadd_custom_command(\nOUTPUT${UNICODE_DATA_HEADER}\nCOMMAND${write_if_different}${UNICODE_DATA_HEADER}${UNICODE_GENERATOR}-h -u${UNICODE_DATA_PATH}-s${SPECIAL_CASING_PATH}-p${PROP_LIST_PATH}-w${WORD_BREAK_PATH}\nCOMMAND${write_if_different}${UNICODE_DATA_HEADER}$<TARGET_FILE:GenerateUnicodeData>-h -u${UNICODE_DATA_PATH}-s${SPECIAL_CASING_PATH}-p${PROP_LIST_PATH}-w${WORD_BREAK_PATH}\nVERBATIM\nDEPENDSGenerateUnicodeData\nMAIN_DEPENDENCY${UNICODE_DATA_PATH}${SPECIAL_CASING_PATH}\n)\n\nadd_custom_command(\nOUTPUT${UNICODE_DATA_IMPLEMENTATION}\nCOMMAND${write_if_different}${UNICODE_DATA_IMPLEMENTATION}${UNICODE_GENERATOR}-c -u${UNICODE_DATA_PATH}-s${SPECIAL_CASING_PATH}-p${PROP_LIST_PATH}-w${WORD_BREAK_PATH}\nCOMMAND${write_if_different}${UNICODE_DATA_IMPLEMENTATION}$<TARGET_FILE:GenerateUnicodeData>-c -u${UNICODE_DATA_PATH}-s${SPECIAL_CASING_PATH}-p${PROP_LIST_PATH}-w${WORD_BREAK_PATH}\nVERBATIM\nDEPENDSGenerateUnicodeData\nMAIN_DEPENDENCY${UNICODE_DATA_PATH}${SPECIAL_CASING_PATH}\n"}
{"Commit title": "LibGfx: Remove unused headers from BitmapFont.{cpp,h}", "Commit body": "@@ -5,20 +5,11 @@\n*/\n\n#include\"BitmapFont.h\"\n#include\"Bitmap.h\"\n#include\"Emoji.h\"\n#include<AK/StdLibExtras.h>\n#include<AK/StringBuilder.h>\n#include<AK/Utf32View.h>\n#include<AK/Utf8View.h>\n#include<AK/Vector.h>\n#include<LibCore/FileStream.h>\n#include<LibGfx/FontDatabase.h>\n#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n#include<sys/mman.h>\n#include<unistd.h>\n\nnamespaceGfx{\n\n"}
{"Commit title": "LibGUI: Account for the row and column headers when painting a TableView", "Commit body": "@@ -73,8 +73,8 @@ void TableView::paint_event(PaintEvent& event)\ninty_offset =column_header().is_visible() ?column_header().height() :0;\n\nbooldummy;\nintfirst_visible_row =index_at_event_position(frame_inner_rect().top_left(), dummy).row();\nintlast_visible_row =index_at_event_position(frame_inner_rect().bottom_right(), dummy).row();\nintfirst_visible_row =index_at_event_position(frame_inner_rect().top_left().translated(x_offset, y_offset), dummy).row();\nintlast_visible_row =index_at_event_position(frame_inner_rect().bottom_right().translated(x_offset, y_offset), dummy).row();\n\nif(first_visible_row == -1)\nfirst_visible_row =0;\n"}
{"Commit title": "Everywhere: Force linker hash style to be gnu", "Commit body": "@@ -116,7 +116,8 @@ endforeach()\n\nset(CMAKE_INSTALL_NAME_TOOL\"\")\nset(CMAKE_SHARED_LIBRARY_SUFFIX\".so\")\nset(CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS\"-shared\")\nset(CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS\"-shared -Wl,--hash-style=gnu\")\nset(CMAKE_CXX_LINK_FLAGS\"-Wl,--hash-style=gnu\")\n\n#Note: MacOS has different rpath rules from linux.\n#We disable it completely for MacOS hosts to avoid having to track down all the individual flags to unset\n"}
{"Commit title": "LibUnicode: Optimize the canonical composition algorithm implementation", "Commit body": "@@ -208,42 +208,52 @@ static void canonical_ordering_algorithm(Span<u32> code_points)\n//See Section 3.11, D115 of Version 15.0.0 of the Unicode Standard.\nstaticboolis_blocked(Span<u32> code_points,size_ta,size_tc)\n{\nif(!is_starter(code_points[a]) ||a == c -1)\nif(a == c -1)\nreturnfalse;\nautoconstc_combining_class =Unicode::canonical_combining_class(code_points[c]);\nautoconstb_combining_class =Unicode::canonical_combining_class(code_points[c -1]);\nreturnb_combining_class==0|| b_combining_class>= c_combining_class;\nreturnb_combining_class >= c_combining_class;\n}\n\n//The Canonical Composition Algorithm, as specified in Version 15.0.0 of the Unicode Standard.\n//See Section 3.11, D117; and UAX #15 https://unicode.org/reports/tr15\n//https://www.unicode.org/versions/Unicode15.0.0/ch03.pdf#G50628\nstaticvoidcanonical_composition_algorithm(Vector<u32>& code_points)\n{\nif(code_points.size() <=1)\nreturn;\nssize_tlast_starter =is_starter(code_points[0]) ?0: -1;\nfor(size_ti =1; i < code_points.size(); ++i) {\nautoconstcurrent_character = code_points[i];\n//R1. Seek back (left) to find the last Starter L preceding C in the character sequence\nfor(ssize_tj = i -1; j >=0; --j) {\nif(!is_starter(code_points[j]))\ncontinue;\n//R2. If there is such an L, and C is not blocked from L,\n//and there exists a Primary Composite P which is canonically equivalent to <L, C>,\n//then replace L by P in the sequence and delete C from the sequence.\nif(is_blocked(code_points.span(), j, i))\ncontinue;\nif(last_starter == -1) {\nif(is_starter(current_character))\nlast_starter = i;\ncontinue;\n}\n//R2. If there is such an L, and C is not blocked from L,\n//and there exists a Primary Composite P which is canonically equivalent to <L, C>,\n//then replace L by P in the sequence and delete C from the sequence.\nif(is_blocked(code_points.span(), last_starter, i)) {\nif(is_starter(current_character))\nlast_starter = i;\ncontinue;\n}\n\nautocomposite =combine_hangul_code_points(code_points[j], current_character);\nautocomposite =combine_hangul_code_points(code_points[last_starter], current_character);\n\nif(composite ==0)\ncomposite =combine_code_points(code_points[j], current_character);\nif(composite ==0)\ncomposite =combine_code_points(code_points[last_starter], current_character);\n\nif(composite !=0) {\ncode_points[j] = composite;\ncode_points.remove(i);\n--i;\nbreak;\n}\nif(composite ==0) {\nif(is_starter(current_character))\nlast_starter = i;\ncontinue;\n}\n\ncode_points[last_starter] = composite;\ncode_points.remove(i);\n--i;\n}\n}\n\n"}
{"Commit title": "Bump org.mockito:mockito-core from 4.11.0 to 5.12.0", "Commit body": "@@ -16,7 +16,7 @@ ext {\nreactiveStreamsVersion=\"1.0.4\"\njunitVersion=\"4.13.2\"\ntestNgVersion=\"7.5\"\nmockitoVersion=\"4.11.0\"\nmockitoVersion=\"5.12.0\"\njmhLibVersion=\"1.21\"\nguavaVersion=\"33.2.0-jre\"\n}\n"}
{"Commit title": "#22244fix typo", "Commit body": "@@ -70,7 +70,7 @@ tree.sequences.node.tip = MariaDB Sequences\n\nmanager.catalog.name=Catalog manager\n\nparameters.all.caches= Cachemeta data\nparameters.all.caches= Cachemetadata\nparameters.all.caches.tip= Read tables constraints and columns at the stage of reading tables.\\nThis setting may reduce metadata loading performance for small databases and increase for large databases.\n\nmeta.org.jkiss.dbeaver.ext.mysql.model.MySQLCatalog.name.name=Schema Name\n"}
{"Commit title": "AK: Use correct wide integer type for qhat check in UFixedBigIntDivision", "Commit body": "@@ -95,7 +95,7 @@ constexpr void div_mod_internal(\nqhat =div_mod_words(dividend[i -1], dividend[i], divisor_approx, rhat);\n\nautois_qhat_too_large = [&] {\nreturnUFixedBigInt<native_word_size> { qhat }.wide_multiply(divisor[divisor_len -2]) >u128{ dividend[i -2], rhat };\nreturnUFixedBigInt<native_word_size> { qhat }.wide_multiply(divisor[divisor_len -2]) >UFixedBigInt<native_word_size *2>{ dividend[i -2], rhat };\n};\nif(is_qhat_too_large()) {\n--qhat;\n"}
{"Commit title": "#20060Revert JSQLParser to 4.5", "Commit body": "@@ -9,7 +9,7 @@\n<name>DBeaver - 3rd party dependencies</name>\n\n<properties>\n<tycho-version>3.0.0</tycho-version>\n<tycho-version>3.0.1</tycho-version>\n<reficio-p2-version>1.4.1</reficio-p2-version>\n<repo-name>DBeaver CE Update</repo-name>\n</properties>\n@@ -34,7 +34,7 @@\n<id>default-cli</id>\n<configuration>\n<artifacts>\n<artifact><id>com.github.jsqlparser:jsqlparser:4.6</id></artifact>\n<artifact><id>com.github.jsqlparser:jsqlparser:4.5</id></artifact>\n<!--<artifact><id>com.manticore-projects.jsqlformatter:jsqlformatter:0.1.7</id></artifact>-->\n\n<artifact><id>org.apache.commons:commons-jexl3:3.1</id></artifact>\n"}
{"Commit title": "LibPDF: Usedraw_rect()to show debug clipping rects", "Commit body": "@@ -305,12 +305,12 @@ RENDERER_HANDLER(path_append_rect)\n\nvoidRenderer::activate_clip()\n{\nautobounding_box =state().clipping_paths.current.bounding_box();\nautobounding_box =state().clipping_paths.current.bounding_box().to_type<int>();\nm_painter.clear_clip_rect();\nif(m_rendering_preferences.show_clipping_paths) {\nm_painter.stroke_path(rect_path(bounding_box), Color::Black,1);\nm_painter.draw_rect(bounding_box, Color::Black);\n}\nm_painter.add_clip_rect(bounding_box.to_type<int>());\nm_painter.add_clip_rect(bounding_box);\n}\n\nvoidRenderer::deactivate_clip()\n"}
{"Commit title": "#18798escape wild cards during primary and imported keys loading", "Commit body": "@@ -732,8 +732,9 @@ public JDBCStatement prepareUniqueConstraintsLoadStatement(@NotNull JDBCSession\nthrowsSQLException,DBException{\nreturnsession.getMetaData().getPrimaryKeys(\nowner.getCatalog() ==null?null:owner.getCatalog().getName(),\nowner.getSchema() ==null||DBUtils.isVirtualObject(owner.getSchema()) ?null:owner.getSchema().getName(),\nforParent==null?owner.getDataSource().getAllObjectsPattern() :forParent.getName())\nowner.getSchema() ==null||DBUtils.isVirtualObject(owner.getSchema()) ?\nnull:JDBCUtils.escapeWildCards(session,owner.getSchema().getName()),\nforParent==null?owner.getDataSource().getAllObjectsPattern() :JDBCUtils.escapeWildCards(session,forParent.getName()))\n.getSourceStatement();\n}\n\n@@ -749,10 +750,11 @@ public GenericTableForeignKey createTableForeignKeyImpl(GenericTableBase table,\npublicJDBCStatementprepareForeignKeysLoadStatement(@NotNullJDBCSessionsession,@NotNullGenericStructContainerowner,@NullableGenericTableBaseforParent)throwsSQLException{\nreturnsession.getMetaData().getImportedKeys(\nowner.getCatalog() ==null?null:owner.getCatalog().getName(),\nowner.getSchema() ==null||DBUtils.isVirtualObject(owner.getSchema()) ?null:owner.getSchema().getName(),\nowner.getSchema() ==null||DBUtils.isVirtualObject(owner.getSchema()) ?\nnull:JDBCUtils.escapeWildCards(session,owner.getSchema().getName()),\nforParent==null?\nowner.getDataSource().getAllObjectsPattern() :\nforParent.getName())\nJDBCUtils.escapeWildCards(session,forParent.getName()))\n.getSourceStatement();\n}\n\n"}
{"Commit title": "LibIPC: Use a simpler encoding for arithmetic values", "Commit body": "@@ -40,11 +40,6 @@ class Encoder {\nreturnm_buffer.data.try_ensure_capacity(m_buffer.data.size() + capacity);\n}\n\nvoidappend(u8 value)\n{\nm_buffer.data.unchecked_append(value);\n}\n\nErrorOr<void>append(u8const* values,size_tcount)\n{\nTRY(extend_capacity(count));\n@@ -67,31 +62,7 @@ class Encoder {\ntemplate<Arithmetic T>\nErrorOr<void>encode(Encoder& encoder, Tconst& value)\n{\nTRY(encoder.extend_capacity(sizeof(T)));\n\nifconstexpr(sizeof(T) ==1) {\nencoder.append(static_cast<u8>(value));\n}elseifconstexpr(sizeof(T) ==2) {\nencoder.append(static_cast<u8>(value));\nencoder.append(static_cast<u8>(value >>8));\n}elseifconstexpr(sizeof(T) ==4) {\nencoder.append(static_cast<u8>(value));\nencoder.append(static_cast<u8>(value >>8));\nencoder.append(static_cast<u8>(value >>16));\nencoder.append(static_cast<u8>(value >>24));\n}elseifconstexpr(sizeof(T) ==8) {\nencoder.append(static_cast<u8>(value));\nencoder.append(static_cast<u8>(value >>8));\nencoder.append(static_cast<u8>(value >>16));\nencoder.append(static_cast<u8>(value >>24));\nencoder.append(static_cast<u8>(value >>32));\nencoder.append(static_cast<u8>(value >>40));\nencoder.append(static_cast<u8>(value >>48));\nencoder.append(static_cast<u8>(value >>56));\n}else{\nstatic_assert(DependentFalse<T>);\n}\n\nTRY(encoder.append(reinterpret_cast<u8const*>(&value),sizeof(value)));\nreturn{};\n}\n\n"}
{"Commit title": "HackStudio: Remove adjustment of text range for documentation tooltip", "Commit body": "@@ -263,11 +263,8 @@ void Editor::mousemove_event(GUI::MouseEvent& event)\n}\n\nif(span.range.contains(text_position)) {\nautoadjusted_range = span.range;\nautoend_line_length =document().line(span.range.end().line()).length();\nadjusted_range.end().set_column(min(end_line_length, adjusted_range.end().column() +1));\nautohovered_span_text =document().text_in_range(adjusted_range);\ndbgln_if(EDITOR_DEBUG,\"Hovering: {}\\\"{}\\\"\", adjusted_range, hovered_span_text);\nautohovered_span_text =document().text_in_range(span.range);\ndbgln_if(EDITOR_DEBUG,\"Hovering: {}\\\"{}\\\"\", span.range, hovered_span_text);\n\nif(is_clickable) {\nis_over_clickable =true;\n"}
{"Commit title": "#17675read enum values specifically for new added types", "Commit body": "@@ -314,6 +314,27 @@ private void readEnumValues(@NotNull DBRProgressMonitor monitor) throws DBExcept\n.toArray();\n}\n\nprivatevoidreadNewEnumValues(DBRProgressMonitormonitor)throwsDBException{\ntry(JDBCSessionsession=DBUtils.openMetaSession(monitor,this,\"Refresh enum values\")) {\ntry(JDBCPreparedStatementdbStat=session.prepareStatement(\n\"SELECT e.enumlabel\\n\"+\n\"FROM pg_catalog.pg_enum e\\n\"+\n\"WHERE e.enumtypid=?\\n\"+\n\"ORDER BY e.enumsortorder\")) {\ndbStat.setLong(1,getObjectId());\ntry(JDBCResultSetrs=dbStat.executeQuery()) {\nList<String>values=newArrayList<>();\nwhile(rs.nextRow()) {\nvalues.add(JDBCUtils.safeGetString(rs,1));\n}\nenumValues=values.toArray();\n}\n}catch(SQLExceptione) {\nthrownewDBException(\"Error reading enum values\",e,getDataSource());\n}\n}\n}\n\npublicstaticString[]getOidTypes() {\nreturnOID_TYPES;\n}\n@@ -627,9 +648,13 @@ public DBSObject refreshObject(@NotNull DBRProgressMonitor monitor) throws DBExc\n\n@Property(viewable=true,order=16,visibleIf=EnumTypeValidator.class)\npublicObject[]getEnumValues(DBRProgressMonitormonitor) {\nif(typeCategory==PostgreTypeCategory.E&&enumValues==null) {\nif(typeCategory==PostgreTypeCategory.E&&ArrayUtils.isEmpty(enumValues)) {\ntry{\nreadEnumValues(monitor);\nif(ArrayUtils.isEmpty(enumValues)) {\n// Probably new objects not cached yet. Let's read them.\nreadNewEnumValues(monitor);\n}\n}catch(DBExceptione) {\nlog.error(\"Can't read enum values of type \"+getFullTypeName());\nenumValues=newObject[]{0};\n"}
{"Commit title": "LibUnicode: Make unicode data generation logic more relocatable", "Commit body": "@@ -30,31 +30,25 @@ if (ENABLE_UNICODE_DATABASE_DOWNLOAD)\nfile(DOWNLOAD${WORD_BREAK_URL}${WORD_BREAK_PATH}INACTIVITY_TIMEOUT 10)\nendif()\n\nset(UNICODE_GENERATOR CodeGenerators/GenerateUnicodeData)\nset(UNICODE_DATA_HEADER UnicodeData.h)\nset(UNICODE_DATA_IMPLEMENTATION UnicodeData.cpp)\nset(UNICODE_DATA_HEADER LibUnicode/UnicodeData.h)\nset(UNICODE_DATA_IMPLEMENTATION LibUnicode/UnicodeData.cpp)\n\nif(CMAKE_SOURCE_DIRMATCHES\".*/Lagom\")#Lagom-only build.\nset(UNICODE_GENERATOR LibUnicode/CodeGenerators/GenerateUnicodeData)\nset(UNICODE_DATA_HEADER LibUnicode/UnicodeData.h)\nset(UNICODE_DATA_IMPLEMENTATION LibUnicode/UnicodeData.cpp)\nelseif(CMAKE_CURRENT_BINARY_DIRMATCHES\".*/Lagom\")#Lagom build within the main SerenityOS build.\nset(UNICODE_GENERATOR ../../Userland/Libraries/LibUnicode/CodeGenerators/GenerateUnicodeData)\nset(UNICODE_DATA_HEADER LibUnicode/UnicodeData.h)\nset(UNICODE_DATA_IMPLEMENTATION LibUnicode/UnicodeData.cpp)\nif(CMAKE_CURRENT_BINARY_DIRMATCHES\".*/LibUnicode\")#Serenity build.\nset(UNICODE_DATA_HEADER UnicodeData.h)\nset(UNICODE_DATA_IMPLEMENTATION UnicodeData.cpp)\nendif()\n\nadd_custom_command(\nOUTPUT${UNICODE_DATA_HEADER}\nCOMMAND${write_if_different}${UNICODE_DATA_HEADER}${UNICODE_GENERATOR}-h -u${UNICODE_DATA_PATH}-s${SPECIAL_CASING_PATH}-p${PROP_LIST_PATH}-w${WORD_BREAK_PATH}\nCOMMAND${write_if_different}${UNICODE_DATA_HEADER}$<TARGET_FILE:GenerateUnicodeData>-h -u${UNICODE_DATA_PATH}-s${SPECIAL_CASING_PATH}-p${PROP_LIST_PATH}-w${WORD_BREAK_PATH}\nVERBATIM\nDEPENDSGenerateUnicodeData\nMAIN_DEPENDENCY${UNICODE_DATA_PATH}${SPECIAL_CASING_PATH}\n)\n\nadd_custom_command(\nOUTPUT${UNICODE_DATA_IMPLEMENTATION}\nCOMMAND${write_if_different}${UNICODE_DATA_IMPLEMENTATION}${UNICODE_GENERATOR}-c -u${UNICODE_DATA_PATH}-s${SPECIAL_CASING_PATH}-p${PROP_LIST_PATH}-w${WORD_BREAK_PATH}\nCOMMAND${write_if_different}${UNICODE_DATA_IMPLEMENTATION}$<TARGET_FILE:GenerateUnicodeData>-c -u${UNICODE_DATA_PATH}-s${SPECIAL_CASING_PATH}-p${PROP_LIST_PATH}-w${WORD_BREAK_PATH}\nVERBATIM\nDEPENDSGenerateUnicodeData\nMAIN_DEPENDENCY${UNICODE_DATA_PATH}${SPECIAL_CASING_PATH}\n"}
{"Commit title": "LibGfx: Remove unused headers from BitmapFont.{cpp,h}", "Commit body": "@@ -5,20 +5,11 @@\n*/\n\n#include\"BitmapFont.h\"\n#include\"Bitmap.h\"\n#include\"Emoji.h\"\n#include<AK/StdLibExtras.h>\n#include<AK/StringBuilder.h>\n#include<AK/Utf32View.h>\n#include<AK/Utf8View.h>\n#include<AK/Vector.h>\n#include<LibCore/FileStream.h>\n#include<LibGfx/FontDatabase.h>\n#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n#include<sys/mman.h>\n#include<unistd.h>\n\nnamespaceGfx{\n\n"}
{"Commit title": "LibGUI: Account for the row and column headers when painting a TableView", "Commit body": "@@ -73,8 +73,8 @@ void TableView::paint_event(PaintEvent& event)\ninty_offset =column_header().is_visible() ?column_header().height() :0;\n\nbooldummy;\nintfirst_visible_row =index_at_event_position(frame_inner_rect().top_left(), dummy).row();\nintlast_visible_row =index_at_event_position(frame_inner_rect().bottom_right(), dummy).row();\nintfirst_visible_row =index_at_event_position(frame_inner_rect().top_left().translated(x_offset, y_offset), dummy).row();\nintlast_visible_row =index_at_event_position(frame_inner_rect().bottom_right().translated(x_offset, y_offset), dummy).row();\n\nif(first_visible_row == -1)\nfirst_visible_row =0;\n"}
{"Commit title": "Everywhere: Force linker hash style to be gnu", "Commit body": "@@ -116,7 +116,8 @@ endforeach()\n\nset(CMAKE_INSTALL_NAME_TOOL\"\")\nset(CMAKE_SHARED_LIBRARY_SUFFIX\".so\")\nset(CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS\"-shared\")\nset(CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS\"-shared -Wl,--hash-style=gnu\")\nset(CMAKE_CXX_LINK_FLAGS\"-Wl,--hash-style=gnu\")\n\n#Note: MacOS has different rpath rules from linux.\n#We disable it completely for MacOS hosts to avoid having to track down all the individual flags to unset\n"}
{"Commit title": "xxhash.h as of 2c611a76f914828bed675f0f342d6c4199ffee1e:xxhash.h", "Commit body": ""}
{"Commit title": "Add --slow_usecs option to determine when the \"long op\" message is pr…", "Commit body": "@@ -1235,6 +1235,10 @@ DEFINE_int64(stats_interval_seconds, 0, \"Report stats every N seconds. This \"\nDEFINE_int32(stats_per_interval,0,\"Reports additional stats per interval when\"\n\"this is greater than 0.\");\n\nDEFINE_uint64(slow_usecs,1000000,\n\"A message is printed for operations that\"\n\"take at least this many microseconds.\");\n\nDEFINE_int64(report_interval_seconds,0,\n\"If greater than zero, it will write simple stats in CSV format\"\n\"to --report_file every N seconds\");\n@@ -2140,7 +2144,7 @@ class Stats {\n}\nhist_[op_type]->Add(micros);\n\nif(micros >20000&& !FLAGS_stats_interval) {\nif(micros >= FLAGS_slow_usecs&& !FLAGS_stats_interval) {\nfprintf(stderr,\"long op: %\"PRIu64\"micros%30s\\r\", micros,\"\");\nfflush(stderr);\n}\n"}
{"Commit title": "Reword", "Commit body": "@@ -1369,8 +1369,7 @@ struct Options : public DBOptions, public ColumnFamilyOptions {\n//NOT MAINTAINED: This function has not been and is not maintained.\n//DEPRECATED: This function might be removed in a future release.\n//In general, defaults are changed to suit broad interests. Opting\n//out of a change on upgrade should be deliberate and considered\n//rather than automatic and thoughtless.\n//out of a change on upgrade should be deliberate and considered.\nOptions*OldDefaults(introcksdb_major_version =4,\nintrocksdb_minor_version =6);\n\n"}
